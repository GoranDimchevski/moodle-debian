#! /bin/sh -e
# postinst script for moodle 
#
# see: dh_installdeb(1)
#
# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package
#
# quoting from the policy:
#     Any necessary prompting should almost always be confined to the
#     post-installation script, and should be protected with a conditional
#     so that unnecessary prompting doesn't happen if a package's
#     installation fails and the `postinst' is called with `abort-upgrade',
#     `abort-remove' or `abort-deconfigure'.

unud=/var/lib/update-notifier/user.d
mrr_mysql_server=moodle-reconfigure-required_mysql-server
mrr_postgresql=moodle-reconfigure-required_postgresql
mrr_fqdn_check=moodle-reconfigure-required_fqdn-check

# escape_quotes borrowed originally from Ubuntu mythtv package
escape_quotes() {
    cat <<EOF | sed -e "s/'/\\\\'/g"
$1
EOF
}

# DoSQL borrowed originally from Ubuntu mythtv package
DoMySQL() {
    local dbtype="$1"
    local host="$2"
    local admin_username="$3"
    local admin_password="$4"
    local database="$5"
    local statement="`escape_quotes \"$6\"`"
    local tmp=`tempfile -m 600`
	cat <<EOF >$tmp
$admin_password
EOF
    perl -e "
use DBI;
chomp(\$password=<>);
@statements=split(/;/, '$statement');
\$db = DBI->connect('dbi:mysql:host=$host;database=$database',
		    '$admin_username', \$password,
		    { PrintError => 0 }) || die 'Failed to connect to database: ' . \$DBI::errstr;
for \$s (@statements) { \$db->do(\$s) || die 'Failed to execute SQL: ' . \$s . '\n' . \$DBI::errstr; }
" < $tmp
    ret=$?
    rm -f $tmp
    return $ret
}

check_php5myinstalled() {
    dpkg -s php5-mysql || return 1
    return 0
}

check_myinstalled() {
    test -x /usr/sbin/mysqld || return 1
    type mysql >/dev/null 2>&1 || return 1
    return 0
}

check_php5pginstalled() {
    dpkg -s php5-pgsql || return 1
    return 0
}

check_pginstalled() {
    type pg_lsclusters >/dev/null 2>&1 || return 1
    type psql >/dev/null 2>&1 || return 1
    return 0
}

check_pgsafe() {
    dbname="$1"

    type pg_lsclusters >/dev/null 2>&1 || { echo 'pg_lsclusters not found in $PATH'; return 1; }
    o=$(pg_lsclusters -h) || { echo "pg_lsclusters failed."; return 1; }

    if [ $(echo "$o" | wc -l) != 1 ]; then
        echo "You have configured more than one PostgreSQL cluster." >&2
        return 1
    fi

    echo "$o" | if read VERSION CLUSTER trash; then
        cf="/etc/postgresql/$VERSION/$CLUSTER/pg_hba.conf"
        grep -q '^local.*all.*all.*ident.*sameuser$' "$cf" || {
            echo "Your settings in $cf do not allow me to continue." >&2
            return 1;
    }
    fi

    su -c 'psql -Atl' postgres | grep "^$dbname|" && {
        echo "There is already a database named $dbname."
        return 1;
    }

    return 0
}

get_config() {

    # Multiple webservers were presented in the past.
    # Multiple webservers may be presented in the future.
    webserver="apache2"

    db_get moodle/local_only
    local_only="$RET"

    db_get moodle/fqdn_check
    if [ "$RET" = "false" ]; then
	db_set moodle/fqdn_check true
	echo 'moodle configuration left incomplete pending verification of FQDN' >&2
	if test -d $unud; then
	    cp -f "/usr/share/moodle/update-notifier/$mrr_fqdn_check" "$unud/$mrr_fqdn_check"
	fi
	exit 0
    fi

    db_get moodle/https_only
    https_only="$RET"

    db_get moodle/db_server
    db_server="$RET"

    db_get moodle/db_host
    db_host="$RET"

    db_get moodle/db_create
    db_create="$RET"

    case $db_server in
	"postgresql")
	    db_type="postgres7"
	    db_port=5432
	    dba_name=postgres
	    ;;

	"mysql-server")
	    db_type="mysql"
	    db_port=3306
	    dba_name=root
	    ;;
	*)
	    echo "Unknown database server type: $db_server"
	    die
    esac

    db_get moodle/dba_password || true
    dba_password="$RET"

    db_get moodle/dbu_name
    dbu_name="$RET"

    db_get moodle/dbu_password
    dbu_password="$RET"

    db_name='moodle'
}

apache_config() {

    if [ "$local_only" = "true" ]; then
	allowdeny="order deny,allow
deny from all
allow from 127.0.0.0/255.0.0.0"
    else
	allowdeny="order allow,deny
allow from all"
    fi

    cfile=/etc/moodle/apache.conf
    tempcfile=`tempfile`
    cat > $tempcfile <<EOF
# This file has been generated by debconf

Alias /moodle /usr/share/moodle/

<DirectoryMatch /usr/share/moodle/>

Options +FollowSymLinks
AllowOverride None

${allowdeny}

<IfModule mod_php5.c>
	php_flag magic_quotes_gpc On
	php_flag magic_quotes_runtime Off
	php_flag file_uploads On
	php_flag short_open_tag On
	php_flag session.auto_start Off
	php_flag session.bug_compat_warn Off

	php_value upload_max_filesize 2M
	php_value post_max_size 2M
</IfModule>

<IfModule mod_php4.c>
	php_flag magic_quotes_gpc On
	php_flag magic_quotes_runtime Off
	php_flag file_uploads On
	php_flag short_open_tag On
	php_flag session.auto_start Off
	php_flag session.bug_compat_warn Off

	php_value upload_max_filesize 2M
	php_value post_max_size 2M
</IfModule>

<IfModule mod_dir.c>
	DirectoryIndex index.php
</IfModule>

</DirectoryMatch>
EOF
    ucf --debconf-ok $tempcfile $cfile
    chmod 640 $cfile
    chown www-data:www-data $cfile
}

moodle_config() {

    if [ "$https_only" = "true" ]; then
	protocol="https"
    else
	protocol="http"
    fi

    if [ "$local_only" = "true" ]; then
	hostname=localhost
    else
	hostname=`hostname --fqdn 2>/dev/null`
	if [ -z "$hostname" ]; then
	    echo 'moodle configuration left incomplete pending configuration of FQDN' >&2
	    if test -d $unud; then
		cp -f "/usr/share/moodle/update-notifier/$mrr_fqdn_check" "$unud/$mrr_fqdn_check"
	    fi
	    exit 0
	fi
    fi

    wwwroot="$protocol://$hostname/moodle";

    cfile=/etc/moodle/config.php
    tempcfile=`tempfile`
    cat > $tempcfile <<EOF
<?
 # This file has been generated by debconf
 # You can find a commented config file in /usr/share/doc/moodle/

 unset(\$CFG);

 \$CFG->dbtype = '${db_type}';
 \$CFG->dbhost = '${db_host}';
 \$CFG->dbname = '${db_name}';
 \$CFG->dbuser = '${dbu_name}';
 \$CFG->dbpass = '${dbu_password}';
 \$CFG->prefix = 'mdl_';

 \$CFG->dbpersist = "true";

 \$CFG->wwwroot = '${wwwroot}';
 \$CFG->dirroot = '/usr/share/moodle';
 \$CFG->dataroot = '/var/lib/moodle';
 \$CFG->directorypermissions = 0750;
 \$CFG->admin = 'admin';

 \$CFG->pathtodu = '/usr/bin/du';
 \$CFG->unzip = '/usr/bin/unzip';
 \$CFG->zip = '/usr/bin/zip';

 \$CFG->respectsessionsettings = true;

	if (file_exists("\$CFG->dirroot/lib/setup.php"))  {       // Do not edit
		include_once("\$CFG->dirroot/lib/setup.php");
	} else {
		if (\$CFG->dirroot == dirname(__FILE__)) {
			echo "<p>Could not find this file: \$CFG->dirroot/lib/setup.php</p>";
			echo "<p>Are you sure all your files have been uploaded?</p>";
		} else {
			echo "<p>Error detected in config.php</p>";
			echo "<p>Error in: \\\$CFG->dirroot = '\$CFG->dirroot';</p>";
			echo "<p>Try this: \\\$CFG->dirroot = '".dirname(__FILE__)."';</p>";
		}
		die;
	}
// MAKE SURE WHEN YOU EDIT THIS FILE THAT THERE ARE NO SPACES, BLANK LINES,
// RETURNS, OR ANYTHING ELSE AFTER THE TWO CHARACTERS ON THE NEXT LINE.
?>
EOF
    ucf --debconf-ok $tempcfile $cfile
    chmod 640 $cfile
    chown www-data:www-data $cfile
}

case "$1" in
    configure)
	. /usr/share/debconf/confmodule
	db_version 2.0

	# care about config files
	moodledir=/usr/share/moodle
	
	# Read debconf and edit the config file accordingly
	get_config
	apache_config
	moodle_config
	db_stop

	if [ -r /etc/moodle/config.php ]; then
	      [ -f $moodledir/config.php ] && rm $moodledir/config.php
	      ln -s /etc/moodle/config.php $moodledir/config.php
	fi

	# Links to external libraries
	[ ! -h /usr/share/moodle/lib/smarty ] && ln -s /usr/share/php/smarty /usr/share/moodle/lib/smarty

	# Care about the repository
	repository=/var/lib/moodle
	if [ -d $repository ]; then
	    # set the owner and change rights accordingly
	    chown -R www-data:www-data $repository
	    chmod 0755 $repository
	fi

	# Add the Apache configuration file to Apache conf.d directory
	if [ ! -e /etc/${webserver}/conf.d/moodle ]
	then
	   if [ -d /etc/${webserver}/conf.d/ ]
	   then
	      ln -s /etc/moodle/apache.conf /etc/${webserver}/conf.d/moodle
	   else
		  echo "---------------------------------------------------------"
		  echo "The selected web server doesn't seem to be installed"
		  echo "You should select a web server which is installed or"
		  echo "configure your web server manually"
		  echo "---------------------------------------------------------"

	   fi
	fi
	invoke-rc.d ${webserver} reload >/dev/null || true

	# care about the database creation
	case "$db_type" in
	    mysql)
		if [ "$db_create" = "false" ]; then
		    echo "Remember that you have elected to create your MySQL database manually." >&2
		else
		    if ! check_myinstalled; then
			echo 'Error - You have specified that you wish to use a mysql' >&2
			echo 'database, but either mysql-server or mysql-client is ' >&2
			echo 'not installed. You must install mysql-server and mysql-client' >&2
			echo 'and then reconfigure moodle.' >&2
			if test -d $unud; then
			    cp -f "/usr/share/moodle/update-notifier/$mrr_mysql_server" "$unud/$mrr_mysql_server"
			fi
			exit 0
		    fi

		    if ! DoMySQL "$db_server" "$db_host" "$dba_name" "$dba_password" "$db_name" "SELECT NULL" 2>/dev/null; then
			if ! DoMySQL "$db_server" "$db_host" "$dba_name" "$dba_password" "" \
			     "CREATE DATABASE $db_name"; then
			    echo "Failed to create database (incorrect admin username/password?)" >&2
			    echo "It's also possible that mysql-server wasn't running.  After install" >&2
			    echo "is completed, you will need to make sure mysql-server is running" >&2
			    echo "and that you supplied correct information. Try:" >&2
			    echo "sudo dpkg-reconfigure moodle" >&2
			    # silently exit, instead pop up a notification for user indicating this
			    if test -d $unud; then
				cp -f "/usr/share/moodle/update-notifier/$mrr_mysql_server" "$unud/$mrr_mysql_server"
			    fi
			    exit 0
			fi
		    fi
		    DoMySQL "$db_server" "$db_host" "$dba_name" "$dba_password" "$db_name" \
		            "GRANT ALL PRIVILEGES ON $db_name.* TO $dbu_name@localhost IDENTIFIED BY '$dbu_password'"

		    DoMySQL "$db_server" "$db_host" "$dba_name" "$dba_password" "$db_name" \
		            "GRANT ALL PRIVILEGES ON $db_name.* TO $dbu_name@'%' IDENTIFIED BY '$dbu_password'"

		    if ! check_php5myinstalled; then
			echo 'Error - You have specified that you wish to use a mysql' >&2
			echo 'database, but php5-mysql is not installed. You must install' >&2
			echo 'php5-mysql before you can complete your moodle installation.' >&2
			exit 0
		    fi
		fi
	    ;;
	    postgres7)
		if [ "$db_create" = "false" ]; then
		    echo "Remember that you have elected to create your PostgreSQL database manually." >&2
		else
		    if ! check_pginstalled; then
			echo 'Error - You have specified that you wish to use a postgresql' >&2
			echo 'database, but either postgresql or postgresql-client is not installed.' >&2
			echo 'You must install postgresql and postgresql-client and then reconfigure moodle.' >&2
			if test -d $unud; then
			    cp -f "/usr/share/moodle/update-notifier/$mrr_postgresql" "$unud/$mrr_postgresql"
			fi
			exit 0
		    fi

		    if ! check_pgsafe "$db_name"; then
			echo "Error - You must create your PostgreSQL database manually." >&2
		    else
			id "$dbu_name" 2>/dev/null || adduser --system --home /nonexistent --no-create-home --disabled-login "$dbu_name" >/dev/null
			su -c "psql --command \"CREATE ROLE $dbu_name PASSWORD '$dbu_password' NOSUPERUSER CREATEDB NOCREATEROLE INHERIT LOGIN;\"" $dba_name >/dev/null
			su -c "createdb -E UTF8 -O \"$dbu_name\" \"$db_name\"" $dba_name >/dev/null
		    fi

		    if ! check_php5pginstalled; then
			echo 'Error - You have specified that you wish to use a postgresql' >&2
			echo 'database, but php5-pgsql is not installed. You must install' >&2
			echo 'php5-pgsql before you can complete your moodle installation.' >&2
			exit 0
		    fi
		fi
	    ;;
	esac

	echo "Moodle URL: $wwwroot"
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)

    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0


